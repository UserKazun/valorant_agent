// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

type Agent struct {
	ID         int    `db:"id"`
	Name       string `db:"name"`
	Background string `db:"background"`
	CreatedAt  string `db:"created_at"`
	UpdatedAt  string `db:"updated_at"`
}

// Agent defines model for Agent.
type AgentSuccessResult struct {
	Status bool `json:"status"`
	Data []Agent `json:"data"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Agents
	// (GET /api/agents)
	GetAgents(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAgents converts echo context to params.
func (w *ServerInterfaceWrapper) GetAgents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAgents(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/agents", wrapper.GetAgents)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xU32rUTBR/lXC+7+L7YLL5syt1c+XWovSmCloFS5FpcpJMTTLDzElpWfZit4hILwQv",
	"FF9AvPIJRB8m9D1kMrFbWSsI7s1mzpzfnN/8fufMHFJZK9lgQwaSOZi0xJr3n7MCG7IfSkuFmgT24SOe",
	"vii0bJvMrjI0qRaKhGwgAW4h3jrD++8pPzOezL1K5Mg8KmVblGSYh5SO/gcGdKYQEjCkRVPAgkGqkRNm",
	"zzltHp9x4t6Q4GWckESNwCCXurb5NgH9IbhxsriRsMjW+aIhLFBbQMNrvAnS7/2iSKuy39MfEv6U/oIB",
	"CapsaN+gXifIo2NMCRic+njKa1U5l2aVSNF7VAsqeyKc8EG+LbRdQjSdbvlR6I8jYIA1F5W9l0WMjEXc",
	"KWxslMr6x/4T1CIXmEFCukUGudCG9np9XClw+kaTmEHFr/YcAQZGFM2+2uFkg3EYTf3wth9PYGF/DEST",
	"y029TnglNW9o1EtuvG550a1eX7781C0/dsvP3fmr7vxLt/rWrd5evnl3+fV9t/zQrS5gLdV9JI9XlTcc",
	"MHu4CwxOUBtXIBqF1jOpsOFKQALjUTgKgYHiVPYyBlyJwKHtskD6mzTtWHF7ym7myM5cJQYajZKNcV7G",
	"YWj/UtnQMJFcqUqkPTQ4NpbFHK67b+89u2J9wqsWhy7gkBzMYfvaDAMwuOtmaka9O3Hsh1v+OHochsmt",
	"OBlPnwGD3R1IIgaDr8dItuf2XTPfjFscMjDEqTWuc3q33RtjCf2rMYcE/gnWj1AwvECBe356wM96W8sm",
	"4WTTiD1J3r3+Un2Vtq65Phu64EpZ4oWB5MCNMRw6QqhtU/TStNoOQ0mkkiCoZMqrUhpKonE8hsXh4nsA",
	"AAD//64eZKAwBQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
